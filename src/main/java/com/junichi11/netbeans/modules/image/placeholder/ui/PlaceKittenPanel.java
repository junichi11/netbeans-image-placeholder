/*
 * The MIT License
 *
 * Copyright 2015 junichi11.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.junichi11.netbeans.modules.image.placeholder.ui;

import com.junichi11.netbeans.modules.image.placeholder.options.PlaceKittenOptions;
import javax.swing.event.ChangeListener;
import org.openide.util.ChangeSupport;

/**
 *
 * @author junichi11
 */
public final class PlaceKittenPanel extends PlaceholderCategoryPanel {

    private static final long serialVersionUID = -1627333516924536884L;
    private final ChangeSupport changeSupport = new ChangeSupport(this);

    /**
     * Creates new form LorempixelPanel
     */
    public PlaceKittenPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightSpinner = new javax.swing.JSpinner();
        grayCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(widthLabel, org.openide.util.NbBundle.getMessage(PlaceKittenPanel.class, "PlaceKittenPanel.widthLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(heightLabel, org.openide.util.NbBundle.getMessage(PlaceKittenPanel.class, "PlaceKittenPanel.heightLabel.text")); // NOI18N

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(400, 0, 1920, 10));

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(200, 0, 1920, 10));

        org.openide.awt.Mnemonics.setLocalizedText(grayCheckBox, org.openide.util.NbBundle.getMessage(PlaceKittenPanel.class, "PlaceKittenPanel.grayCheckBox.text")); // NOI18N
        grayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(widthLabel)
                            .addComponent(heightLabel))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(grayCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthLabel)
                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightLabel)
                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grayCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void grayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayCheckBoxActionPerformed
        fireChange();
    }//GEN-LAST:event_grayCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox grayCheckBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getCategoryName() {
        return "placekitten"; // NOI18N
    }

    @Override
    public void addChangeListener(ChangeListener listener) {
        widthSpinner.addChangeListener(listener);
        heightSpinner.addChangeListener(listener);
        changeSupport.addChangeListener(listener);
    }

    @Override
    public void removeChangeListener(ChangeListener listener) {
        widthSpinner.removeChangeListener(listener);
        heightSpinner.removeChangeListener(listener);
        changeSupport.removeChangeListener(listener);
    }

    @Override
    public String getUrl() {
        return new UrlBuilder(getImageWidth(), getImageHeight())
                .gray(isGray())
                .build()
                .toString();
    }

    @Override
    public int getImageWidth() {
        return (Integer) widthSpinner.getValue();
    }

    @Override
    public int getImageHeight() {
        return (Integer) heightSpinner.getValue();
    }

    @Override
    public void saveAsDefault() {
        PlaceKittenOptions options = PlaceKittenOptions.getInstance();
        options.setWidth(getImageWidth());
        options.setHeight(getImageHeight());
        options.setGray(isGray());
    }

    @Override
    public void loadDefault() {
        PlaceKittenOptions options = PlaceKittenOptions.getInstance();
        setImageWidth(options.getWidth());
        setImageHeight(options.getHeight());
        setGray(options.isGray());
    }

    private void setImageWidth(int width) {
        widthSpinner.setValue(width);
    }

    private void setImageHeight(int height) {
        heightSpinner.setValue(height);
    }

    private boolean isGray() {
        return grayCheckBox.isSelected();
    }

    private void setGray(boolean isGray) {
        grayCheckBox.setSelected(isGray);
    }

    void fireChange() {
        changeSupport.fireChange();
    }

    private static class UrlBuilder {

        private static final String BASE_URL = "http://placekitten.com"; // NOI18N
        private final int width;
        private final int height;
        private boolean gray = false;
        private String url = ""; // NOI18N

        public UrlBuilder(int width, int height) {
            this.width = width;
            this.height = height;
        }

        public UrlBuilder gray(boolean gray) {
            this.gray = gray;
            return this;
        }

        public UrlBuilder build() {
            StringBuilder sb = new StringBuilder();
            sb.append(BASE_URL);
            if (gray) {
                sb.append("/").append("g"); // NOI18N
            }

            // size
            sb.append("/").append(width); // NOI18N
            sb.append("/").append(height); // NOI18N

            url = sb.toString();
            return this;
        }

        @Override
        public String toString() {
            return url;
        }
    }

}
