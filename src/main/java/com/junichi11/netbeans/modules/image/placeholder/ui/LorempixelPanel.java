/*
 * The MIT License
 *
 * Copyright 2015 junichi11.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.junichi11.netbeans.modules.image.placeholder.ui;

import com.junichi11.netbeans.modules.image.placeholder.options.LorempixelOptions;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Arrays;
import java.util.List;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.util.ChangeSupport;

/**
 *
 * @author junichi11
 */
public final class LorempixelPanel extends PlaceholderCategoryPanel {

    private static final long serialVersionUID = 5600685396819692245L;
    private static final List<String> CATEGORIES = Arrays.asList(
            "", // NOI18N
            "abstract", // NOI18N
            "animals", // NOI18N
            "business", // NOI18N
            "cats", // NOI18N
            "city", // NOI18N
            "fashion", // NOI18N
            "food", // NOI18N
            "nature", // NOI18N
            "nightlife", // NOI18N
            "people", // NOI18N
            "sports", // NOI18N
            "technics", // NOI18N
            "transport" // NOI18N
    );
    private final ChangeSupport changeSupport = new ChangeSupport(this);

    /**
     * Creates new form LorempixelPanel
     */
    public LorempixelPanel() {
        initComponents();
        init();
    }

    private void init() {
        for (String category : CATEGORIES) {
            categoryComboBox.addItem(category);
        }
        categoryComboBox.addItemListener(new DefaultItemListener());
        Document customTextDocument = textTextField.getDocument();
        customTextDocument.addDocumentListener(new DefaultDocumentListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightSpinner = new javax.swing.JSpinner();
        categoryLabel = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<String>();
        categoryNumberSpinner = new javax.swing.JSpinner();
        textLabel = new javax.swing.JLabel();
        textTextField = new javax.swing.JTextField();
        grayCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(widthLabel, org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.widthLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(heightLabel, org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.heightLabel.text")); // NOI18N

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(400, 0, 1920, 10));

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(200, 0, 1920, 10));

        org.openide.awt.Mnemonics.setLocalizedText(categoryLabel, org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.categoryLabel.text")); // NOI18N

        categoryNumberSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        org.openide.awt.Mnemonics.setLocalizedText(textLabel, org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.textLabel.text")); // NOI18N

        textTextField.setText(org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.textTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(grayCheckBox, org.openide.util.NbBundle.getMessage(LorempixelPanel.class, "LorempixelPanel.grayCheckBox.text")); // NOI18N
        grayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(categoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryComboBox, 0, 200, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(widthLabel)
                                    .addComponent(heightLabel))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(grayCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textLabel)
                        .addGap(44, 44, 44)
                        .addComponent(textTextField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthLabel)
                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightLabel)
                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLabel)
                    .addComponent(textTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grayCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void grayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayCheckBoxActionPerformed
        fireChange();
    }//GEN-LAST:event_grayCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JSpinner categoryNumberSpinner;
    private javax.swing.JCheckBox grayCheckBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel textLabel;
    private javax.swing.JTextField textTextField;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getCategoryName() {
        return "lorempixel"; // NOI18N
    }

    @Override
    public void addChangeListener(ChangeListener listener) {
        widthSpinner.addChangeListener(listener);
        heightSpinner.addChangeListener(listener);
        categoryNumberSpinner.addChangeListener(listener);
        changeSupport.addChangeListener(listener);
    }

    @Override
    public void removeChangeListener(ChangeListener listener) {
        widthSpinner.removeChangeListener(listener);
        heightSpinner.removeChangeListener(listener);
        categoryNumberSpinner.removeChangeListener(listener);
        changeSupport.removeChangeListener(listener);
    }

    @Override
    public String getUrl() {
        return new UrlBuilder(getImageWidth(), getImageHeight())
                .gray(isGray())
                .category(getCategory())
                .categoryNumber(getCategoryNumber())
                .customText(getCustomText())
                .build()
                .toString();
    }

    @Override
    public int getImageWidth() {
        return (Integer) widthSpinner.getValue();
    }

    @Override
    public int getImageHeight() {
        return (Integer) heightSpinner.getValue();
    }

    @Override
    public void saveAsDefault() {
        LorempixelOptions options = LorempixelOptions.getInstance();
        options.setWidth(getImageWidth());
        options.setHeight(getImageHeight());
        options.setCategory(getCategory());
        options.setCategoryNumber(getCategoryNumber());
        options.setCustomText(getCustomText());
        options.setGray(isGray());
    }

    @Override
    public void loadDefault() {
        LorempixelOptions options = LorempixelOptions.getInstance();
        setImageWidth(options.getWidth());
        setImageHeight(options.getHeight());
        setCategory(options.getCategory());
        setCategoryNumber(options.getCategoryNumber());
        setCustomText(options.getCustomText());
        setGray(options.isGray());
    }

    private void setImageWidth(int width) {
        widthSpinner.setValue(width);
    }

    private void setImageHeight(int height) {
        heightSpinner.setValue(height);
    }

    private boolean isGray() {
        return grayCheckBox.isSelected();
    }

    private void setGray(boolean isGray) {
        grayCheckBox.setSelected(isGray);
    }

    private String getCategory() {
        return (String) categoryComboBox.getSelectedItem();
    }

    private void setCategory(String category) {
        categoryComboBox.setSelectedItem(category);
    }

    private int getCategoryNumber() {
        return (Integer) categoryNumberSpinner.getValue();
    }

    private void setCategoryNumber(int number) {
        categoryNumberSpinner.setValue(number);
    }

    private String getCustomText() {
        return textTextField.getText();
    }

    private void setCustomText(String text) {
        textTextField.setText(text);
    }

    void fireChange() {
        changeSupport.fireChange();
    }

    private static class UrlBuilder {

        private static final String BASE_URL = "http://lorempixel.com"; // NOI18N
        private final int width;
        private final int height;
        private boolean gray = false;
        private String category;
        private int categoryNumber;
        private String customText;
        private String url;

        public UrlBuilder(int width, int height) {
            this.width = width;
            this.height = height;
        }

        public UrlBuilder gray(boolean gray) {
            this.gray = gray;
            return this;
        }

        public UrlBuilder category(String category) {
            this.category = category;
            return this;
        }

        public UrlBuilder categoryNumber(int categoryNumber) {
            this.categoryNumber = categoryNumber;
            return this;
        }

        public UrlBuilder customText(String customText) {
            this.customText = customText;
            return this;
        }

        public UrlBuilder build() {
            StringBuilder sb = new StringBuilder();
            sb.append(BASE_URL);
            if (gray) {
                sb.append("/").append("g"); // NOI18N
            }

            // size
            sb.append("/").append(width); // NOI18N
            sb.append("/").append(height); // NOI18N

            // category
            if (category != null && !category.isEmpty()) {
                sb.append("/").append(category); // NOI18N
                // number
                if (categoryNumber > 0) {
                    sb.append("/").append(categoryNumber); // NOI18N
                }
            }

            // custom text
            if (customText != null && !customText.isEmpty()) {
                String replaced = customText.trim().replaceAll(" ", "-"); // NOI18N
                sb.append("/").append(replaced); // NOI18N
            }
            url = sb.toString();
            return this;
        }

        @Override
        public String toString() {
            return url;
        }
    }

    //~ Inner classes
    private class DefaultItemListener implements ItemListener {

        public DefaultItemListener() {
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            fireChange();
        }
    }

    private class DefaultDocumentListener implements DocumentListener {

        public DefaultDocumentListener() {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processUpdate();
        }

        private void processUpdate() {
            fireChange();
        }
    }
}
